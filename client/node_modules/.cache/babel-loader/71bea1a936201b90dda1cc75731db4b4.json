{"ast":null,"code":"var _jsxFileName = \"/Users/coby/Documents/Test/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  LOAD_LISTS_ARRAY: \"LOAD_LISTS_ARRAY\"\n}; // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    lists: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null,\n    currentTab: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // GET ALL THE LISTS\n\n      case GlobalStoreActionType.LOAD_LISTS_ARRAY:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload,\n            lists: store.lists\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            lists: store.lists\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = async function (id, newName) {\n    try {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n\n        if (auth.user !== null && auth.user.email === top5List.ownerEmail) {\n          top5List.name = newName;\n\n          async function updateList(top5List) {\n            response = await api.updateTop5ListById(top5List._id, top5List);\n\n            if (response.data.success) {\n              async function getListPairs(top5List) {\n                response = await api.getTop5ListPairs();\n\n                if (response.data.success) {\n                  let pairsArray = response.data.idNamePairs;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      idNamePairs: pairsArray,\n                      top5List: top5List\n                    }\n                  });\n                }\n              }\n\n              getListPairs(top5List);\n            }\n          }\n\n          updateList(top5List);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email\n    };\n\n    try {\n      const response = await api.createTop5List(payload);\n\n      if (response.data.success) {\n        let newList = response.data.top5List;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newList\n        });\n      } else {\n        console.log(\"API FAILED TO CREATE A NEW LIST\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  store.filterPairs = async function (arr, ownerEmail) {\n    let arr2 = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      const response = await api.getTop5ListById(arr[i]._id);\n\n      if (response.data.top5List.ownerEmail === ownerEmail) {\n        arr2.push(response.data.top5List);\n      }\n    }\n\n    return arr2;\n  };\n\n  store.loadUserIdNamePairs = async function (ownerEmail) {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      pairsArray = await store.filterPairs(pairsArray, ownerEmail);\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n      let lists = [];\n\n      for (let i = 0; i < pairsArray.length; i++) {\n        let response2 = await api.getTop5ListById(pairsArray[i]._id);\n        lists.push(response2.data.top5List);\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n        payload: lists\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n      let lists = [];\n\n      for (let i = 0; i < pairsArray.length; i++) {\n        let response2 = await api.getTop5ListById(pairsArray[i]._id);\n        lists.push(response2.data.top5List);\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n        payload: lists\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (auth.user !== null && auth.user.email === listToDelete.ownerEmail) {\n      let response = await api.deleteTop5ListById(listToDelete._id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        history.push(\"/\");\n      }\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n      }\n    }\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 423,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"T1hUT4hO5wx1QCcq5QGAX5tcCUA=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/coby/Documents/Test/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","LOAD_LISTS_ARRAY","GlobalStoreContextProvider","props","store","setStore","idNamePairs","lists","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","currentTab","history","auth","storeReducer","action","type","payload","isListNameEditActive","isItemEditActive","changeListName","id","newName","response","getTop5ListById","data","success","top5List","user","email","ownerEmail","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","err","console","log","closeCurrentList","createNewList","newListName","items","createTop5List","newList","filterPairs","arr","arr2","i","length","push","loadUserIdNamePairs","response2","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","moveItem","start","end","temp","updateCurrentList","updateItem","index","newItem","setIsListNameEditActive","setIsItemEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    LOAD_LISTS_ARRAY: \"LOAD_LISTS_ARRAY\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        lists: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        currentTab: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            // GET ALL THE LISTS\n            case GlobalStoreActionType.LOAD_LISTS_ARRAY: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload,\n                    lists: store.lists\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        try {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                if(auth.user !== null && auth.user.email === top5List.ownerEmail) {\n                    top5List.name = newName;\n                    async function updateList(top5List) {\n                        response = await api.updateTop5ListById(top5List._id, top5List);\n                        if (response.data.success) {\n                            async function getListPairs(top5List) {\n                                response = await api.getTop5ListPairs();\n                                if (response.data.success) {\n                                    let pairsArray = response.data.idNamePairs;\n                                    storeReducer({\n                                        type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                        payload: {\n                                            idNamePairs: pairsArray,\n                                            top5List: top5List\n                                        }\n                                    });\n                                }\n                            }\n                            getListPairs(top5List);\n                        }\n                    }\n                    updateList(top5List);\n                }\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email\n        };\n        try {\n            const response = await api.createTop5List(payload);\n            if (response.data.success) {\n                let newList = response.data.top5List;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: newList\n                }\n                );\n            }\n            else {\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    store.filterPairs = async function(arr, ownerEmail) {\n        let arr2 = [];\n        for(let i = 0; i < arr.length; i++) {\n            const response = await api.getTop5ListById(arr[i]._id);\n            if(response.data.top5List.ownerEmail === ownerEmail) {\n                arr2.push(response.data.top5List);\n            }\n        }\n        return arr2;\n    }\n\n    store.loadUserIdNamePairs = async function(ownerEmail) {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            pairsArray = await store.filterPairs(pairsArray, ownerEmail);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n            \n            let lists = [];\n            for(let i = 0; i < pairsArray.length; i++) {\n                let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                lists.push(response2.data.top5List);\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n                payload: lists\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n            \n            let lists = [];\n            for(let i = 0; i < pairsArray.length; i++) {\n                let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                lists.push(response2.data.top5List);\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n                payload: lists\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if(auth.user !== null && auth.user.email === listToDelete.ownerEmail) {\n            let response = await api.deleteTop5ListById(listToDelete._id);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n                history.push(\"/\");\n            }\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n            }\n        }\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}