[{"/Users/coby/Documents/Test/client/src/index.js":"1","/Users/coby/Documents/Test/client/src/App.js":"2","/Users/coby/Documents/Test/client/src/reportWebVitals.js":"3","/Users/coby/Documents/Test/client/src/components/index.js":"4","/Users/coby/Documents/Test/client/src/auth/index.js":"5","/Users/coby/Documents/Test/client/src/store/index.js":"6","/Users/coby/Documents/Test/client/src/components/AppBanner.js":"7","/Users/coby/Documents/Test/client/src/components/HomeWrapper.js":"8","/Users/coby/Documents/Test/client/src/components/HomeScreen.js":"9","/Users/coby/Documents/Test/client/src/components/LoginScreen.js":"10","/Users/coby/Documents/Test/client/src/components/ListCard.js":"11","/Users/coby/Documents/Test/client/src/components/RegisterScreen.js":"12","/Users/coby/Documents/Test/client/src/components/Top5Item.js":"13","/Users/coby/Documents/Test/client/src/components/SplashScreen.js":"14","/Users/coby/Documents/Test/client/src/components/WorkspaceScreen.js":"15","/Users/coby/Documents/Test/client/src/components/Statusbar.js":"16","/Users/coby/Documents/Test/client/src/api/index.js":"17","/Users/coby/Documents/Test/client/src/components/Modal.js":"18","/Users/coby/Documents/Test/client/src/components/Copyright.js":"19"},{"size":928,"mtime":1637599699713,"results":"20","hashOfConfig":"21"},{"size":1398,"mtime":1637607200827,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1637599699713,"results":"23","hashOfConfig":"21"},{"size":704,"mtime":1637610461650,"results":"24","hashOfConfig":"21"},{"size":4998,"mtime":1638243482430,"results":"25","hashOfConfig":"21"},{"size":31867,"mtime":1638248713432,"results":"26","hashOfConfig":"21"},{"size":5270,"mtime":1637700106666,"results":"27","hashOfConfig":"21"},{"size":332,"mtime":1637606362545,"results":"28","hashOfConfig":"21"},{"size":2363,"mtime":1638303155075,"results":"29","hashOfConfig":"21"},{"size":3510,"mtime":1637606864135,"results":"30","hashOfConfig":"21"},{"size":11712,"mtime":1638313724979,"results":"31","hashOfConfig":"21"},{"size":5894,"mtime":1638243217197,"results":"32","hashOfConfig":"21"},{"size":2350,"mtime":1638075162212,"results":"33","hashOfConfig":"21"},{"size":1419,"mtime":1637700168785,"results":"34","hashOfConfig":"21"},{"size":5213,"mtime":1638247655419,"results":"35","hashOfConfig":"21"},{"size":8536,"mtime":1638239689319,"results":"36","hashOfConfig":"21"},{"size":1866,"mtime":1638248802063,"results":"37","hashOfConfig":"21"},{"size":2350,"mtime":1637599699711,"results":"38","hashOfConfig":"21"},{"size":452,"mtime":1637599699709,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"3j4noh",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/coby/Documents/Test/client/src/index.js",[],["88","89"],"/Users/coby/Documents/Test/client/src/App.js",["90"],"import './App.css';\nimport { React } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { AuthContextProvider } from './auth';\nimport { GlobalStoreContextProvider } from './store'\nimport {\n    AppBanner,\n    HomeWrapper,\n    RegisterScreen,\n    Statusbar,\n    WorkspaceScreen,\n    LoginScreen,\n    SplashScreen\n} from './components'\n/*\n    This is our application's top-level component.\n    \n    @author McKilla Gorilla\n*/\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <AuthContextProvider>\n                <GlobalStoreContextProvider>              \n                    <AppBanner />\n                    <Switch>\n                        <Route path=\"/\" exact component={SplashScreen} />\n                        <Route path=\"/register/\" exact component={RegisterScreen} />\n                        <Route path=\"/top5list/:id\" exact component={WorkspaceScreen} />\n                        <Route path=\"/login/\" exact component={LoginScreen} />\n                        <Route path=\"/lists/\" exact component={HomeWrapper} />\n                    </Switch>\n                </GlobalStoreContextProvider>\n            </AuthContextProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App","/Users/coby/Documents/Test/client/src/reportWebVitals.js",[],"/Users/coby/Documents/Test/client/src/components/index.js",[],"/Users/coby/Documents/Test/client/src/auth/index.js",["91","92"],"import React, { createContext, useEffect, useState } from \"react\";\nimport { useContext } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN_USER: \"LOGIN_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    SHOW_ERROR: \"SHOW_ERROR\",\n    HIDE_ERROR: \"HIDE_ERROR\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        err: null\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    err: null\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false,\n                    err: null\n                })\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    err: null\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false,\n                    err: null\n                })\n            }\n            case AuthActionType.SHOW_ERROR: {\n                return setAuth({\n                    user: auth.user,\n                    loggedIn: auth.loggedIn,\n                    err: payload.msg\n                })\n            }\n            case AuthActionType.HIDE_ERROR: {\n                return setAuth({\n                    user: auth.user,\n                    loggedIn: auth.loggedIn,\n                    err: null\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.logoutUser = async function (store) {\n        const response = await api.logoutUser();\n        if(response.status === 200) {\n            authReducer({\n                type: AuthActionType.LOGOUT_USER,\n                payload: null\n            })\n            store.closeCurrentList();\n            history.push(\"/\");\n        }\n    }\n\n    auth.loginUser = async function (userData, store) {\n        try {\n            const response = await api.loginUser(userData);\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.LOGIN_USER,\n                    payload: {\n                        user: response.data.user,\n                    }\n                })\n                history.push(\"/lists/\");\n                store.loadUserIdNamePairs(userData.email);\n            }\n        } catch (err) {\n            authReducer({\n                type: AuthActionType.SHOW_ERROR,\n                payload: {\n                    msg: err.response.data.errorMessage\n                }\n            })\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        try {\n            const response = await api.getLoggedIn();\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.GET_LOGGED_IN,\n                    payload: {\n                        loggedIn: response.data.loggedIn,\n                        user: response.data.user\n                    }\n                });\n            }\n        } catch (err) {\n            console.log(err.response.data.errorMessage);\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        try {\n            const response = await api.registerUser(userData);\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: null\n                    }\n                })\n                history.push(\"/\");\n                //store.loadIdNamePairs();\n            }\n        } catch (err) {\n            console.log(err);\n            authReducer({\n                type: AuthActionType.SHOW_ERROR,\n                payload: {\n                    msg: err.response.data.errorMessage\n                }\n            })\n        }\n    }\n\n    auth.hideError = function() {\n        authReducer({\n            type: AuthActionType.HIDE_ERROR,\n            payload: null\n        })\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","/Users/coby/Documents/Test/client/src/store/index.js",["93","94","95","96","97","98"],"import { Global } from '@emotion/react';\nimport { listSubheaderClasses, stepperClasses } from '@mui/material';\nimport { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    LOAD_LISTS_ARRAY: \"LOAD_LISTS_ARRAY\",\n    RELOAD_STATE: \"RELOAD_STATE\",\n    SET_LIST_VIEW: \"SET_LIST_VIEW\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        lists: [],\n        shownLists: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            // GET ALL THE LISTS\n            case GlobalStoreActionType.LOAD_LISTS_ARRAY: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: payload,\n                    shownLists: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                });\n            }\n            case GlobalStoreActionType.RELOAD_STATE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: 0,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: store.shownLists\n                })\n            }\n            case GlobalStoreActionType.SET_LIST_VIEW: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    lists: store.lists,\n                    shownLists: payload\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        try {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                if(auth.user !== null && auth.user.email === top5List.ownerEmail) {\n                    top5List.name = newName;\n                    async function updateList(top5List) {\n                        response = await api.updateTop5ListById(top5List._id, top5List);\n                        if (response.data.success) {\n                            async function getListPairs(top5List) {\n                                response = await api.getTop5ListPairs();\n                                if (response.data.success) {\n                                    let pairsArray = response.data.idNamePairs;\n                                    storeReducer({\n                                        type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                        payload: {\n                                            idNamePairs: pairsArray,\n                                            top5List: top5List\n                                        }\n                                    });\n                                }\n                            }\n                            getListPairs(top5List);\n                        }\n                    }\n                    updateList(top5List);\n                }\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    // PUBLISHES A LIST\n    store.setListPublished = async function (name) {\n        try {\n            store.currentList.name = name;\n            let response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            response = await api.getTop5ListById(store.currentList._id);\n            if(response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.datePublished = new Date();\n                async function updateList(top5List){  \n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if(response.data.success) {\n                        store.currentList.datePublished = top5List.datePublished;\n                    }\n                }\n                updateList(top5List);\n\n                let communityList = await store.findCommunityList(top5List.name);\n                if(communityList === null) {\n                    let newListName = top5List.name;\n                    let payload = {\n                        name: newListName,\n                        items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n                        ownerEmail: null,\n                        ownerUsername: null,\n                        datePublished: top5List.datePublished,\n                        views: 0,\n                        likes: 0,\n                        dislikes: 0,\n                        comments: [],\n                        emailLikes: [],\n                        emailDislikes: [],\n                        isCommunityList: true,\n                        communityItems: []\n                    };\n                    response = await api.createTop5List(payload);\n                    communityList = response.data.top5List;\n                    for(let i = 0; i < 5; i++){\n                        communityList.communityItems.push({item: top5List.items[i], points: (5-i)});\n                    }\n                }\n                else {\n                    let communityListItems = communityList.communityItems;\n                    communityList.datePublished = top5List.datePublished;\n                    for(let i = 0; i < 5; i++) {\n                        let index = communityListItems.map(function(item) { return item.item; }).indexOf(top5List.items[i]);\n                        if(index === -1) {\n                            communityListItems.push({item: top5List.items[i], points: (5-i)});\n                        }\n                        else {\n                            communityListItems[index].points += (5-i);\n                        }\n                    }\n                    communityList.communityItems = communityListItems;\n                }\n                communityList.communityItems.sort(function(a, b) { return b.points - a.points })\n                communityList.items[0] = communityList.communityItems[0].item;\n                communityList.items[1] = communityList.communityItems[1].item;\n                communityList.items[2] = communityList.communityItems[2].item;\n                communityList.items[3] = communityList.communityItems[3].item;\n                communityList.items[4] = communityList.communityItems[4].item;\n                response = await api.updateTop5ListById(communityList._id, communityList);\n                store.closeCurrentList();\n                await store.loadUserIdNamePairs(auth.user.email);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    store.findCommunityList = async function (name) {\n        try{\n            let response = await api.getTop5ListPairs();\n            if(response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                for(let i = 0; i < pairsArray.length; i++) {\n                    let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                    let top5List = response2.data.top5List;\n                    if(top5List.isCommunityList && top5List.name.toLowerCase() === name.toLowerCase()) {\n                        return top5List;\n                    }\n                }\n                return null;\n            }\n        } \n        catch (err) {\n            console.log(err);\n        }\n    }\n\n    // HANDLES A PERSON EXPANDING A LIST, THUS INCREASING THE NUMBER OF VIEWS\n    store.incrementViews = async function (list){\n        try {\n            let response = await api.getTop5ListById(list._id);\n            if(response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.views = top5List.views+1;\n                \n                async function updateList(top5List){  \n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                }\n                updateList(top5List);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    // HANDLES THE CURRENT USER POSTING A COMMENT ON A LIST\n    store.postComment = async function (list, comment) {\n        let top5List = list;\n        let poster = auth.user.username;\n        top5List.comments.unshift({poster, comment});\n\n        let response = await api.updateTop5ListById(top5List._id, top5List);\n        if(response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.RELOAD_STATE,\n                payload: null\n            });\n        }\n    }\n\n    // HANDLES THE CURRENT USER LIKING A LIST\n    store.likeList = async function (list) {\n        let top5List = list;\n        let userEmail = auth.user.email;\n        let index = top5List.emailDislikes.indexOf(userEmail);\n        if(index !== -1) {\n            top5List.emailDislikes.splice(index, 1);\n            top5List.dislikes -= 1;\n        }\n        index = top5List.emailLikes.indexOf(userEmail);\n        if(index === -1) {\n            top5List.emailLikes.push(userEmail);\n            top5List.likes += 1;\n        }\n        else {\n            top5List.emailLikes.splice(index, 1);\n            top5List.likes -= 1;\n        }\n        let response = await api.updateTop5ListById(top5List._id, top5List);\n        if(response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.RELOAD_STATE,\n                payload: null\n            })\n        }\n    }\n\n    // CHECKS TO SEE IF THE CURRENT USER HAS LIKED A LIST\n    store.isListLiked = function (list) {\n        if(auth.user !== null) {\n            let userEmail = auth.user.email;\n            if(list.emailLikes.indexOf(userEmail) !== -1) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n\n    // CHECKS TO SEE IF THE CURRENT USER HAS DISLIKED A LIST\n    store.isListDisliked = function (list) {\n        if(auth.user !== null) {\n            let userEmail = auth.user.email;\n            if(list.emailDislikes.indexOf(userEmail) !== -1) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n\n    // HANDLES THE CURRENT USER DISLIKING A LIST\n    store.dislikeList = async function (list) {\n        let top5List = list;\n        let userEmail = auth.user.email;\n        let index = top5List.emailLikes.indexOf(userEmail);\n        if(index !== -1) {\n            top5List.emailLikes.splice(index, 1);\n            top5List.likes -= 1;\n        }\n        index = top5List.emailDislikes.indexOf(userEmail);\n        if(index === -1) {\n            top5List.emailDislikes.push(userEmail);\n            top5List.dislikes += 1;\n        }\n        else {\n            top5List.emailDislikes.splice(index, 1);\n            top5List.dislikes -= 1;\n        }\n        let response = await api.updateTop5ListById(top5List._id, top5List);\n        if(response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.RELOAD_STATE,\n                payload: null\n            });\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: null\n        });\n    }\n\n    store.saveList = async function (name) {\n        store.currentList.name = name;\n        let response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if(response.data.success) {\n            store.closeCurrentList();\n            store.loadUserIdNamePairs(auth.user.email);\n        }\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email,\n            ownerUsername: auth.user.username,\n            datePublished: null,\n            views: 0,\n            likes: 0,\n            dislikes: 0,\n            comments: [],\n            emailLikes: [],\n            emailDislikes: [],\n            isCommunityList: false,\n            communityItems: []\n        };\n        try {\n            const response = await api.createTop5List(payload);\n            if (response.data.success) {\n                let newList = response.data.top5List;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: newList\n                });\n            }\n            else {\n                console.log(\"API FAILED TO CREATE A NEW LIST\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    // TAKES IN AN ARRAY OF LISTS AND RETURNS THE ONES THAT WERE PUBLISHED BY THE SPECIFIED USER\n    store.filterPairs = async function(arr, ownerEmail) {\n        let arr2 = [];\n        for(let i = 0; i < arr.length; i++) {\n            const response = await api.getTop5ListById(arr[i]._id);\n            if(response.data.top5List.ownerEmail === ownerEmail) {\n                arr2.unshift(response.data.top5List);\n            }\n        }\n        return arr2;\n    }\n\n    //  LOAD ALL LISTS THAT BELONG TO A SINGLE USER, BOTH PUBLISHED AND NOT PUBLISHED\n    store.loadUserIdNamePairs = async function(ownerEmail) {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            pairsArray = await store.filterPairs(pairsArray, ownerEmail);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n            \n            store.updateListsState(pairsArray);\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    store.filterPublishedUserPairs = async function(arr, ownerEmail) {\n        let arr2 = [];\n        for(let i = 0; i < arr.length; i++) {\n            const response = await api.getTop5ListById(arr[i]._id);\n            if(response.data.top5List.ownerEmail === ownerEmail && response.data.top5List.datePublished !== null) {\n                arr2.unshift(response.data.top5List);\n            }\n        }\n        return arr2;\n    }\n\n    store.loadPublishedUserIdNamePairs = async function (ownerEmail) {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            pairsArray = await store.filterPublishedUserPairs(pairsArray, ownerEmail);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n            \n            store.updateListsState(pairsArray);\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // LOAD ALL THE LISTS THAT ARE PUBLISHED, BELONGING TO ANY USER\n    store.loadAllPublishedLists = async function () {\n        try{\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                let filteredArray = [];\n                for(let i = 0; i < pairsArray.length; i++) {\n                    let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                    if(response2.data.top5List.datePublished !== null) {\n                        filteredArray.unshift(response2.data.top5List);\n                    }\n                }\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: filteredArray\n                });\n                store.updateListsState(filteredArray);\n                //console.log(store.shownLists);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    store.loadCommunityLists = async function () {\n        let response = await api.getTop5ListPairs();\n        if(response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let filteredArray = [];\n            for(let i = 0; i < pairsArray.length; i++) {\n                let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                if(response2.data.top5List.isCommunityList){\n                    filteredArray.push(response2.data.top5List);\n                }\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: filteredArray\n            })\n            for(let i = 0; i < filteredArray.length; i++) {\n                console.log(filteredArray[i]);\n            }\n            store.updateListsState(filteredArray);\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n            \n            store.updateListsState(pairsArray);\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n    \n    store.updateListsState = async function (array) {\n        let lists = [];\n        for(let i = 0; i < array.length; i++) {\n            let response2 = await api.getTop5ListById(array[i]._id);\n            lists.unshift(response2.data.top5List);\n        }\n        storeReducer({\n            type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n            payload: lists\n        });\n    }\n\n    store.clearShownLists = async function () {\n        let lists = [];\n        storeReducer({\n            type: GlobalStoreActionType.LOAD_LISTS_ARRAY,\n            payload: lists\n        })\n    }\n\n    store.sortLists = function (sortType) {\n        console.log(store.lists);\n        if(sortType === \"descDate\") {\n            store.lists.sort(function(a, b){\n                return Date.parse(a.datePublished) - Date.parse(b.datePublished);\n            })\n        }\n        else if(sortType === \"ascDate\") {\n            store.lists.sort(function(a, b){\n                return Date.parse(b.datePublished) - Date.parse(a.datePublished);\n            })\n        }\n        else if(sortType === \"views\") {\n            store.lists.sort(function(a, b){\n                return b.views - a.views;\n            })\n        }\n        else if(sortType === \"likes\") {\n            store.lists.sort(function(a, b) {\n                return b.likes - a.likes;\n            })\n        }\n        else if(sortType === \"dislikes\") {\n            store.lists.sort(function(a, b) {\n                return b.dislikes - a.dislikes;\n            })\n        }\n        let newListOrder = store.lists;\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_VIEW,\n            payload: newListOrder\n        })\n\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    // THIS FUNCTION CHECKS IF THE USER HAS A LIST WITH A SPECIFIED NAME \n    store.isNameAvailable = function (name) {\n        /*\n        let result = true;\n        try {\n            let response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                for(let i = 0; i < pairsArray.length; i++) {\n                    let response2 = await api.getTop5ListById(pairsArray[i]._id);\n                    if(response2.data.top5List.name === name) {\n                        if(response2.data.top5List.ownerEmail === auth.user.email) {\n                            if(response2.data.top5List.datePublished !== null) {\n                                result = false;\n                            }\n                        }\n                    }\n                }\n                console.log(\"returning: \" + result);\n                return result;\n            }\n        }\n        catch (err) {\n            console.log(err);\n        }*/\n        let result = true;\n        for (let i = 0; i < store.lists.length; i++) {\n            if(store.lists[i].name === name && store.lists[i].datePublished !== null) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n\n    // THIS FUNCTION SEARCHES THROUGH LISTS FOR LISTS THAT START WITH THE SPECIFIED STRING\n    store.searchLists = async function (str) {\n        let arr = [];\n        if(str === \"\") {\n            arr = store.lists;\n        }\n        else {\n            for(let i = 0; i < store.lists.length; i++){\n                if(store.lists[i].name.startsWith(str)){\n                    arr.push(store.lists[i]);\n                }\n            }\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_VIEW,\n            payload: arr\n        })\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if(auth.user !== null && auth.user.email === listToDelete.ownerEmail) {\n            let communityList = await store.findCommunityList(listToDelete.name);\n            let communityListItems = communityList.communityItems;\n            for(let i = 0; i < 5; i++) {\n                let index = communityListItems.map(function(item) { return item.item; }).indexOf(listToDelete.items[i]);\n                communityListItems[index].points -= (5-i);\n            }\n            communityList.communityItems = communityListItems.filter(item => item.points !== 0);\n            console.log(communityList);\n            if(communityList.communityItems.length === 0) {\n                let response3 = await api.deleteTop5ListById(communityList._id);\n            }\n            else {\n                communityList.communityItems.sort(function(a, b) { return b.points - a.points })\n                communityList.items[0] = communityList.communityItems[0].item;\n                communityList.items[1] = communityList.communityItems[1].item;\n                communityList.items[2] = communityList.communityItems[2].item;\n                communityList.items[3] = communityList.communityItems[3].item;\n                communityList.items[4] = communityList.communityItems[4].item;\n                let response = await api.updateTop5ListById(communityList._id, communityList);\n            }\n\n            let response2 = await api.deleteTop5ListById(listToDelete._id);\n            if (response2.data.success) {\n                store.loadUserIdNamePairs(auth.user.email);\n            }\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        console.log(response.data.top5List);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n            }\n        }\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };","/Users/coby/Documents/Test/client/src/components/AppBanner.js",[],"/Users/coby/Documents/Test/client/src/components/HomeWrapper.js",["99"],"import { useContext } from 'react'\nimport HomeScreen from './HomeScreen'\nimport SplashScreen from './SplashScreen'\nimport AuthContext from '../auth'\n\nexport default function HomeWrapper() {\n    const { auth } = useContext(AuthContext);\n    console.log(\"HomeWrapper auth.loggedIn: \" + auth.loggedIn);\n    \n    return <HomeScreen />\n}","/Users/coby/Documents/Test/client/src/components/HomeScreen.js",["100","101","102","103"],"/Users/coby/Documents/Test/client/src/components/LoginScreen.js",["104","105","106"],"import { useContext } from 'react';\nimport AuthContext from '../auth'\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Paper from '@mui/material/Paper';\nimport { GlobalStoreContext } from '../store';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Modal from './Modal';\n\nexport default function LoginScreen() {\n  const { auth } = useContext(AuthContext);\n  const { store } = useContext(GlobalStoreContext);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    // eslint-disable-next-line no-console\n    auth.loginUser({\n        email: formData.get('email'),\n        password: formData.get('password')\n    }, store);\n  };\n\n  return (\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Modal />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: 'url(https://source.unsplash.com/random)',\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Sign In\n              </Button>\n              <Grid container>\n                <Grid item xs>\n                </Grid>\n                <Grid item>\n                  <Link href=\"/register/\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n  );\n}","/Users/coby/Documents/Test/client/src/components/ListCard.js",["107","108"],"/Users/coby/Documents/Test/client/src/components/RegisterScreen.js",[],"/Users/coby/Documents/Test/client/src/components/Top5Item.js",["109","110","111","112","113","114","115"],"import { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { borderRadius } from \"@mui/system\";\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [draggedTo, setDraggedTo] = useState(0);\n    const [text, setText] = useState(\"\");\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsItemEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\" && text !== \"\") {\n            let id = event.target.id.substring(\"item-\".length);\n            store.updateItem(id, event.target.value);\n            toggleEdit();\n        }\n    }\n\n    function handleClick(event) {\n        if(event.detail === 2) {\n            handleToggleEdit(event);\n        }\n    }\n\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n\n    let { index } = props;\n\n    let itemClass = \"top5-item\";\n\n    let component = \n        <Box sx={{ flexGrow: 1 , fontSize: \"40pt\"}} onClick = {handleClick} id = \"list-item\">{props.text}</Box>\n    if(editActive) {\n        component = \n        <TextField\n            required\n            fullWidth\n            id={'item-' + (index)}\n            name=\"name\"\n            className='top5-item'\n            onKeyPress={handleKeyPress}\n            onChange={handleUpdateText}\n            defaultValue={props.text}\n            inputProps={{style: {fontSize: \"24pt\", color: \"black\", background: \"#DEF581\", height: \"22px\", left: \"2%\"}}}\n            style = {{\n                height: \"60px\",\n                color: \"yellow\",\n                width: \"113.7%\"\n            }}\n            autoFocus\n        />\n    }\n    return (component);\n}\n\nexport default Top5Item;","/Users/coby/Documents/Test/client/src/components/SplashScreen.js",[],"/Users/coby/Documents/Test/client/src/components/WorkspaceScreen.js",["116","117"],"import { useState, useContext } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport { Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\nimport { TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n    \n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n    const [ listName, setListName ] = useState(store.currentList.name);\n\n    const handleListKeyPress = function (event) {\n        if(listName !== \"\" && event.code === \"Enter\") {\n            store.changeListName(store.currentList._id, listName);\n        }\n    }\n\n    function hasRepetitions(arr) {\n        for(let i = 0; i < arr.length; i++) {\n            for(let j = i + 1; j < arr.length; j++) {\n                if(arr[i] === arr[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function saveList() {\n        store.saveList(listName);\n    }\n\n    function publishList() {\n        store.setListPublished(listName);\n    }\n\n    function handleUpdate (event) {\n        setListName(event.target.value);\n    }\n\n    let publishDisabled = false;\n    if(listName === \"\") {\n        publishDisabled = true;\n    }\n    else if(store.currentList.items[0] === \"\" || store.currentList.items[1] === \"\" || store.currentList.items[2] === \"\" || store.currentList.items[3] === \"\" || store.currentList.items[4] === \"\") {\n        publishDisabled = true;\n    }\n    else if(hasRepetitions(store.currentList.items)) {\n        publishDisabled = true;\n    } \n    else if(store.isNameAvailable(listName) === false) {\n        publishDisabled = true;\n    }\n    \n\n    return (\n        <div id=\"top5-workspace\">\n            <TextField defaultValue = {store.currentList.name} id = \"list-name\" size = \"small\" sx = {{width: '300px', left: '10px'}}\n                onChange = {handleUpdate} onKeyPress = {handleListKeyPress}/>\n            <div id=\"workspace-edit\">\n                \n            <Container id = \"item-container\">\n                <Grid container spacing={1} border = \"1px\" rowSpacing = {3}>\n                    <Grid container item spacing={2} sx = {{border: '1px'}}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 1 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[0]}\n                                index = {0}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 2 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[1]}\n                                index = {1}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 3 </div>\n                        </Grid>\n                        <Grid item xs = {10}> \n                            <Top5Item\n                                text={store.currentList.items[2]}\n                                index = {2}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 4 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[3]}\n                                index = {3}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 5 </div>\n                        </Grid>\n                        <Grid item xs = {10}> \n                            <Top5Item\n                                text={store.currentList.items[4]}\n                                index = {4}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n            </div>\n            <div id = \"workspaceButtons\">\n                <Button variant = \"contained\" onClick = {saveList}> Save </Button>\n                &nbsp;&nbsp;&nbsp;\n                <Button variant = \"contained\" onClick = {publishList} disabled = {publishDisabled}> Publish </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceScreen;","/Users/coby/Documents/Test/client/src/components/Statusbar.js",["118","119","120","121","122"],"import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport { useLocation } from 'react-router-dom'\nimport HomeIcon from '@mui/icons-material/Home'\nimport GroupsIcon from '@mui/icons-material/Groups'\nimport PersonIcon from '@mui/icons-material/Person'\nimport FunctionsIcon from '@mui/icons-material/Functions'\nimport TextField from '@mui/material/TextField'\nimport Typography from '@mui/material/Typography'\nimport Grid from '@mui/material/Grid'\nimport SortIcon from '@mui/icons-material/Sort'\nimport Fab from '@mui/material/Fab'\nimport AddIcon from '@mui/icons-material/Add'\nimport IconButton from '@mui/material/IconButton'\nimport AuthContext from '../auth'\nimport Menu from '@mui/material/Menu'\nimport MenuItem from '@mui/material/MenuItem'\nimport Container from '@mui/material/Container'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport Box from '@mui/material/Box'\n\n/*\n    Our Status bar React component goes at the bottom of our UI.\n    \n    @author McKilla Gorilla\n*/\nfunction Statusbar(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [searchText, setSearch] = useState(\"\");\n    const isMenuOpen = Boolean(anchorEl);\n    let text = \"\";\n\n    const {tab, homeCallback, groupsCallback, userCallback, communityCallback} = props;\n\n    const location = useLocation();\n    if (store.currentList) {\n        text = store.currentList.name;\n    }\n\n    let isHomeDisabled = false;\n    if(auth.user === null || store.currentList !== null) {\n        isHomeDisabled = true;\n    }\n    \n    let component = \"\";\n    let firstColor = \"grey\";\n    let secondColor = \"grey\";\n    let thirdColor = \"grey\";\n    let fourthColor = \"grey\";\n    let statusBarDisabled = false;\n\n    const handleCreateNewList = () => {\n        store.createNewList();\n    }\n\n    let statusBarContents = \n        <Box>\n            <Fab \n                color=\"primary\" \n                aria-label=\"add\"\n                id=\"add-list-button\"\n                onClick={handleCreateNewList}\n                disabled = {statusBarDisabled}\n            >\n                <AddIcon />\n            </Fab>\n            Your Lists\n        </Box>\n\n    const handleKeyPress = (event) => {\n        if(event.code === \"Enter\") {\n            if(tab !== \"USER\") {\n                store.searchLists(searchText);\n            }\n            else {\n                statusBarContents = <div> {searchText} </div>;\n                store.loadPublishedUserIdNamePairs(searchText);\n            }\n        }\n    }\n\n    const handleChange = (event) => {\n        setSearch(event.target.value);\n    }\n\n    const handleProfileMenuOpen = (event) => {\n        if(!statusBarDisabled) {\n            setAnchorEl(event.currentTarget);\n        }\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleHome = (event) => {\n        setSearch(\"\");\n        homeCallback();\n        store.loadUserIdNamePairs(auth.user.email);\n    }\n\n    const handleGroups = () => {\n        setSearch(\"\");\n        groupsCallback();\n        store.loadAllPublishedLists();\n    }\n\n    function handlePerson() {\n        setSearch(\"\");\n        userCallback();\n        store.clearShownLists();\n    }\n\n    function handleCommunity() {\n        setSearch(\"\");\n        communityCallback();\n        store.loadCommunityLists();\n    }\n\n    function sortList(type) {\n        handleMenuClose();\n        store.sortLists(type);\n    }\n\n    const sortAscDate = (event) => {\n        event.stopPropagation();\n        handleMenuClose();\n        store.sortLists(\"ascDate\");\n    }\n    const sortDescDate = (event) => {\n        event.stopPropagation();\n        handleMenuClose();\n        store.sortLists(\"descDate\");\n    }\n    const sortViews = (event) => {\n        event.stopPropagation();\n        handleMenuClose();\n        store.sortLists(\"views\");\n    }\n    const sortLikes = (event) => {\n        event.stopPropagation();\n        handleMenuClose();\n        store.sortLists(\"likes\");\n    }\n    const sortDislikes = (event) => {\n        event.stopPropagation();\n        handleMenuClose();\n        store.sortLists(\"dislikes\");\n    }\n\n    if(store.currentList !== null){\n        statusBarDisabled = true;\n    }\n    if(tab === \"HOME\" && store.currentList === null) {\n        firstColor = \"blue\";\n    }\n    else if(tab === \"ALL\" && store.currentList === null) {\n        secondColor = \"blue\";\n        statusBarContents = <div> All Lists </div>\n    }\n    else if(tab === \"USER\" && store.currentList === null) {\n        thirdColor = \"blue\";\n        statusBarContents = <div> User Lists </div>\n    }\n    else if(tab === \"COMMUNITY\" && store.currentList === null) {\n        fourthColor = \"blue\";\n        statusBarContents = <div> Community Lists </div>\n    }\n    if(location.pathname === \"/lists/\") {\n        component = <div id=\"top5-list-interface\">\n                        <Grid container spacing = {2}  >\n                            <Grid item xs = {4} >\n                                <IconButton onClick = {(event) => {handleHome(event)}} disabled = {isHomeDisabled}>\n                                    <HomeIcon style = {{fontSize:'30pt', position: 'absolute', left: '2%', color: firstColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handleGroups} disabled = {statusBarDisabled}>\n                                    <GroupsIcon style = {{fontSize:'30pt', position: 'absolute', left: '22%', color: secondColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handlePerson} disabled = {statusBarDisabled}>\n                                    <PersonIcon style = {{fontSize:'30pt', position: 'absolute', left: '42%', color: thirdColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handleCommunity} disabled = {statusBarDisabled}>\n                                    <FunctionsIcon style = {{fontSize:'30pt', position: 'absolute', left: '62%', color: fourthColor}}/>\n                                </IconButton>\n                            </Grid>\n                            <Grid item xs = {4} >\n                                <TextField placeholder = \"Search\" size=\"small\" sx = {{width: \"100%\"}} disabled = {statusBarDisabled}\n                                    onChange = {handleChange} onKeyPress = {handleKeyPress} value = {searchText}/>\n                            </Grid>\n                            <Grid item xs = {4} >\n                                <Typography style = {{\n                                    position: \"absolute\",\n                                    left: \"85%\",\n                                    fontSize: \"20pt\"\n                                }}> Sort By <SortIcon fontSize = \"Small\" onClick = {handleProfileMenuOpen}/> </Typography>\n                            </Grid>\n                        </Grid>\n                        <Box sx = {{display: 'flex', height: '10%', width: '100%', justifyContent: 'center', top: '90%', position: 'absolute'}}>\n                            {statusBarContents}\n                        </Box>\n\n                        <Menu\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={isMenuOpen}\n                            onClose={handleMenuClose}\n                        >\n                            <MenuItem onClick={sortAscDate}>Publish Date (Newest)</MenuItem>\n                            <MenuItem onClick={sortDescDate}>Publish Date (Oldest)</MenuItem>\n                            <MenuItem onClick={sortViews}>Views</MenuItem>\n                            <MenuItem onClick={sortLikes}>Likes</MenuItem>\n                            <MenuItem onClick={sortDislikes}>Dislikes</MenuItem>\n                        </Menu>\n                    </div>\n    }\n    \n    return (\n        component\n    );\n}\n\nexport default Statusbar;","/Users/coby/Documents/Test/client/src/api/index.js",[],"/Users/coby/Documents/Test/client/src/components/Modal.js",["123"],"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport AuthContext from '../auth';\nimport { useContext, useState } from 'react';\nimport Alert from '@mui/material/Alert';\nimport GlobalStoreContext from '../store';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function BasicModal() {\n  const { store } = useContext(GlobalStoreContext);\n  const { auth } = useContext(AuthContext);\n  let open = false;\n\n  const hideError = () => {\n      auth.hideError();\n  }\n\n  const cancelDeletion = () => {\n      store.unmarkListForDeletion();\n  }\n\n  const handleDeletion = () => {\n      store.deleteMarkedList();\n  }\n\n  let component = \"\";\n\n  if(auth.err) {\n    open = true;\n    component = <div>\n                    <Modal\n                        open={open}\n                        onClose={hideError}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={style}>\n                            <Alert severity = \"error\">{auth.err}</Alert>\n                            <Button variant = \"outlined\" onClick = {hideError}> Okay! </Button>\n                        </Box>\n                    </Modal>\n                </div>\n  }\n  if(store.listMarkedForDeletion) {\n    open=true;\n    component = <div>\n                    <Modal\n                        open={open}\n                        onClose={cancelDeletion}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={style}>\n                            <Alert severity = \"error\"> Are you sure you want to delete the Top 5 {store.listMarkedForDeletion.name}?</Alert>\n                            <Button variant = \"outlined\" onClick = {handleDeletion}> Confirm </Button>\n                            <Button variant = \"outlined\" onClick = {cancelDeletion}> Cancel </Button>\n                        </Box>\n                    </Modal>\n                </div>\n  }\n\n  return (component);\n}","/Users/coby/Documents/Test/client/src/components/Copyright.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":10,"column":5,"nodeType":"130","messageId":"131","endLine":10,"endColumn":14},{"ruleId":"128","severity":1,"message":"132","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":29,"column":8,"nodeType":"135","endLine":29,"endColumn":10,"suggestions":"136"},{"ruleId":"128","severity":1,"message":"137","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":16},{"ruleId":"128","severity":1,"message":"138","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":30},{"ruleId":"128","severity":1,"message":"139","line":2,"column":32,"nodeType":"130","messageId":"131","endLine":2,"endColumn":46},{"ruleId":"128","severity":1,"message":"140","line":47,"column":11,"nodeType":"130","messageId":"131","endLine":47,"endColumn":18},{"ruleId":"128","severity":1,"message":"141","line":753,"column":21,"nodeType":"130","messageId":"131","endLine":753,"endColumn":30},{"ruleId":"128","severity":1,"message":"142","line":762,"column":21,"nodeType":"130","messageId":"131","endLine":762,"endColumn":29},{"ruleId":"128","severity":1,"message":"143","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":20},{"ruleId":"128","severity":1,"message":"144","line":1,"column":29,"nodeType":"130","messageId":"131","endLine":1,"endColumn":38},{"ruleId":"128","severity":1,"message":"145","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":13},{"ruleId":"128","severity":1,"message":"146","line":4,"column":15,"nodeType":"130","messageId":"131","endLine":4,"endColumn":25},{"ruleId":"128","severity":1,"message":"147","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":15},{"ruleId":"128","severity":1,"message":"148","line":6,"column":8,"nodeType":"130","messageId":"131","endLine":6,"endColumn":17},{"ruleId":"128","severity":1,"message":"149","line":15,"column":8,"nodeType":"130","messageId":"131","endLine":15,"endColumn":24},{"ruleId":"128","severity":1,"message":"150","line":16,"column":8,"nodeType":"130","messageId":"131","endLine":16,"endColumn":16},{"ruleId":"128","severity":1,"message":"151","line":8,"column":8,"nodeType":"130","messageId":"131","endLine":8,"endColumn":13},{"ruleId":"128","severity":1,"message":"152","line":30,"column":13,"nodeType":"130","messageId":"131","endLine":30,"endColumn":16},{"ruleId":"128","severity":1,"message":"153","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":16},{"ruleId":"128","severity":1,"message":"154","line":6,"column":8,"nodeType":"130","messageId":"131","endLine":6,"endColumn":18},{"ruleId":"128","severity":1,"message":"155","line":7,"column":8,"nodeType":"130","messageId":"131","endLine":7,"endColumn":16},{"ruleId":"128","severity":1,"message":"156","line":8,"column":10,"nodeType":"130","messageId":"131","endLine":8,"endColumn":22},{"ruleId":"128","severity":1,"message":"157","line":18,"column":12,"nodeType":"130","messageId":"131","endLine":18,"endColumn":21},{"ruleId":"128","severity":1,"message":"158","line":18,"column":23,"nodeType":"130","messageId":"131","endLine":18,"endColumn":35},{"ruleId":"128","severity":1,"message":"159","line":54,"column":9,"nodeType":"130","messageId":"131","endLine":54,"endColumn":18},{"ruleId":"128","severity":1,"message":"160","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":12},{"ruleId":"128","severity":1,"message":"146","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":20},{"ruleId":"128","severity":1,"message":"148","line":18,"column":8,"nodeType":"130","messageId":"131","endLine":18,"endColumn":17},{"ruleId":"128","severity":1,"message":"160","line":19,"column":8,"nodeType":"130","messageId":"131","endLine":19,"endColumn":12},{"ruleId":"128","severity":1,"message":"153","line":20,"column":8,"nodeType":"130","messageId":"131","endLine":20,"endColumn":16},{"ruleId":"128","severity":1,"message":"161","line":40,"column":9,"nodeType":"130","messageId":"131","endLine":40,"endColumn":13},{"ruleId":"128","severity":1,"message":"162","line":123,"column":14,"nodeType":"130","messageId":"131","endLine":123,"endColumn":22},{"ruleId":"128","severity":1,"message":"163","line":6,"column":22,"nodeType":"130","messageId":"131","endLine":6,"endColumn":30},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'Statusbar' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["166"],"'Global' is defined but never used.","'listSubheaderClasses' is defined but never used.","'stepperClasses' is defined but never used.","'history' is assigned a value but never used.","'response3' is assigned a value but never used.","'response' is assigned a value but never used.","'SplashScreen' is defined but never used.","'useEffect' is defined but never used.","'Fab' is defined but never used.","'Typography' is defined but never used.","'AddIcon' is defined but never used.","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'key' is assigned a value but never used.","'ListItem' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'borderRadius' is defined but never used.","'draggedTo' is assigned a value but never used.","'setDraggedTo' is assigned a value but never used.","'itemClass' is assigned a value but never used.","'List' is defined but never used.","'text' is assigned a value but never used.","'sortList' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},"Update the dependencies array to be: [auth]",{"range":"169","text":"170"},[810,812],"[auth]"]