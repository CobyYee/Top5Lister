[{"/Users/coby/Documents/Test/client/src/index.js":"1","/Users/coby/Documents/Test/client/src/App.js":"2","/Users/coby/Documents/Test/client/src/reportWebVitals.js":"3","/Users/coby/Documents/Test/client/src/components/index.js":"4","/Users/coby/Documents/Test/client/src/auth/index.js":"5","/Users/coby/Documents/Test/client/src/store/index.js":"6","/Users/coby/Documents/Test/client/src/components/AppBanner.js":"7","/Users/coby/Documents/Test/client/src/components/HomeWrapper.js":"8","/Users/coby/Documents/Test/client/src/components/HomeScreen.js":"9","/Users/coby/Documents/Test/client/src/components/LoginScreen.js":"10","/Users/coby/Documents/Test/client/src/components/ListCard.js":"11","/Users/coby/Documents/Test/client/src/components/RegisterScreen.js":"12","/Users/coby/Documents/Test/client/src/components/Top5Item.js":"13","/Users/coby/Documents/Test/client/src/components/SplashScreen.js":"14","/Users/coby/Documents/Test/client/src/components/WorkspaceScreen.js":"15","/Users/coby/Documents/Test/client/src/components/Statusbar.js":"16","/Users/coby/Documents/Test/client/src/api/index.js":"17","/Users/coby/Documents/Test/client/src/components/Modal.js":"18","/Users/coby/Documents/Test/client/src/components/Copyright.js":"19"},{"size":928,"mtime":1637599699713,"results":"20","hashOfConfig":"21"},{"size":1398,"mtime":1637607200827,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1637599699713,"results":"23","hashOfConfig":"21"},{"size":704,"mtime":1637610461650,"results":"24","hashOfConfig":"21"},{"size":4989,"mtime":1637702293327,"results":"25","hashOfConfig":"21"},{"size":20611,"mtime":1638028854982,"results":"26","hashOfConfig":"21"},{"size":5270,"mtime":1637700106666,"results":"27","hashOfConfig":"21"},{"size":332,"mtime":1637606362545,"results":"28","hashOfConfig":"21"},{"size":2069,"mtime":1637955153399,"results":"29","hashOfConfig":"21"},{"size":3510,"mtime":1637606864135,"results":"30","hashOfConfig":"21"},{"size":8701,"mtime":1638028786029,"results":"31","hashOfConfig":"21"},{"size":5377,"mtime":1637599699711,"results":"32","hashOfConfig":"21"},{"size":2335,"mtime":1637631595874,"results":"33","hashOfConfig":"21"},{"size":1419,"mtime":1637700168785,"results":"34","hashOfConfig":"21"},{"size":5086,"mtime":1637702432772,"results":"35","hashOfConfig":"21"},{"size":6234,"mtime":1637793172978,"results":"36","hashOfConfig":"21"},{"size":1866,"mtime":1637599699708,"results":"37","hashOfConfig":"21"},{"size":2350,"mtime":1637599699711,"results":"38","hashOfConfig":"21"},{"size":452,"mtime":1637599699709,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"3j4noh",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/coby/Documents/Test/client/src/index.js",[],["88","89"],"/Users/coby/Documents/Test/client/src/App.js",["90"],"import './App.css';\nimport { React } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { AuthContextProvider } from './auth';\nimport { GlobalStoreContextProvider } from './store'\nimport {\n    AppBanner,\n    HomeWrapper,\n    RegisterScreen,\n    Statusbar,\n    WorkspaceScreen,\n    LoginScreen,\n    SplashScreen\n} from './components'\n/*\n    This is our application's top-level component.\n    \n    @author McKilla Gorilla\n*/\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <AuthContextProvider>\n                <GlobalStoreContextProvider>              \n                    <AppBanner />\n                    <Switch>\n                        <Route path=\"/\" exact component={SplashScreen} />\n                        <Route path=\"/register/\" exact component={RegisterScreen} />\n                        <Route path=\"/top5list/:id\" exact component={WorkspaceScreen} />\n                        <Route path=\"/login/\" exact component={LoginScreen} />\n                        <Route path=\"/lists/\" exact component={HomeWrapper} />\n                    </Switch>\n                </GlobalStoreContextProvider>\n            </AuthContextProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App","/Users/coby/Documents/Test/client/src/reportWebVitals.js",[],"/Users/coby/Documents/Test/client/src/components/index.js",[],"/Users/coby/Documents/Test/client/src/auth/index.js",["91","92"],"import React, { createContext, useEffect, useState } from \"react\";\nimport { useContext } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN_USER: \"LOGIN_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    SHOW_ERROR: \"SHOW_ERROR\",\n    HIDE_ERROR: \"HIDE_ERROR\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        err: null\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    err: null\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    err: null\n                })\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    err: null\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false,\n                    err: null\n                })\n            }\n            case AuthActionType.SHOW_ERROR: {\n                return setAuth({\n                    user: auth.user,\n                    loggedIn: auth.loggedIn,\n                    err: payload.msg\n                })\n            }\n            case AuthActionType.HIDE_ERROR: {\n                return setAuth({\n                    user: auth.user,\n                    loggedIn: auth.loggedIn,\n                    err: null\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.logoutUser = async function (store) {\n        const response = await api.logoutUser();\n        if(response.status === 200) {\n            authReducer({\n                type: AuthActionType.LOGOUT_USER,\n                payload: null\n            })\n            store.closeCurrentList();\n            history.push(\"/\");\n        }\n    }\n\n    auth.loginUser = async function (userData, store) {\n        try {\n            const response = await api.loginUser(userData);\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.LOGIN_USER,\n                    payload: {\n                        user: response.data.user,\n                    }\n                })\n                history.push(\"/lists/\");\n                store.loadUserIdNamePairs(userData.email);\n            }\n        } catch (err) {\n            authReducer({\n                type: AuthActionType.SHOW_ERROR,\n                payload: {\n                    msg: err.response.data.errorMessage\n                }\n            })\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        try {\n            const response = await api.getLoggedIn();\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.GET_LOGGED_IN,\n                    payload: {\n                        loggedIn: response.data.loggedIn,\n                        user: response.data.user\n                    }\n                });\n            }\n        } catch (err) {\n            console.log(err.response.data.errorMessage);\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        try {\n            const response = await api.registerUser(userData);\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                //store.loadIdNamePairs();\n            }\n        } catch (err) {\n            authReducer({\n                type: AuthActionType.SHOW_ERROR,\n                payload: {\n                    msg: err.response.data.errorMessage\n                }\n            })\n        }\n    }\n\n    auth.hideError = function() {\n        authReducer({\n            type: AuthActionType.HIDE_ERROR,\n            payload: null\n        })\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","/Users/coby/Documents/Test/client/src/store/index.js",["93"],"/Users/coby/Documents/Test/client/src/components/AppBanner.js",[],"/Users/coby/Documents/Test/client/src/components/HomeWrapper.js",["94"],"import { useContext } from 'react'\nimport HomeScreen from './HomeScreen'\nimport SplashScreen from './SplashScreen'\nimport AuthContext from '../auth'\n\nexport default function HomeWrapper() {\n    const { auth } = useContext(AuthContext);\n    console.log(\"HomeWrapper auth.loggedIn: \" + auth.loggedIn);\n    \n    return <HomeScreen />\n}","/Users/coby/Documents/Test/client/src/components/HomeScreen.js",["95","96","97","98"],"import React, { useContext, useEffect, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport { Fab, Typography } from '@mui/material'\nimport AddIcon from '@mui/icons-material/Add';\nimport List from '@mui/material/List';\nimport Modal from './Modal';\nimport Statusbar from './Statusbar';\nimport { WorkspaceScreen } from '.';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const [listTab, setListTab] = useState(\"HOME\");\n\n    const homeCallback = () => {\n        setListTab(\"HOME\");\n    }\n    const groupsCallback = () => {\n        setListTab(\"ALL\");\n    }\n    const userCallback = () => {\n        setListTab(\"USER\");\n    }\n    const communityCallback = () => {\n        setListTab(\"COMMUNITY\");\n    }\n\n    let listCard = \"\";\n    if (store) {\n        listCard = \n            <List sx={{ width: '96%', left: '2%', bgcolor: '#81CAF5', border: '1pt', borderColor: 'black'}}>\n            {\n                store.lists.map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                    />\n                ))\n            }\n            </List>;\n    }\n    let component = \"\";\n    if(store.currentList !== null) {\n        component = <WorkspaceScreen/>\n    }\n    else {\n        component = <div id=\"list-selector-list\">\n                        {\n                            listCard\n                        }\n                        <Modal/>\n                    </div>\n    }\n    return (\n        <div>\n            <div id=\"top5-list-selector\">\n                {component}\n            </div>\n            <Statusbar\n                tab = {listTab}\n                homeCallback = {homeCallback}\n                groupsCallback = {groupsCallback}\n                userCallback = {userCallback}\n                communityCallback = {communityCallback}\n            />\n        </div>)\n}\n\nexport default HomeScreen;","/Users/coby/Documents/Test/client/src/components/LoginScreen.js",["99","100","101"],"import { useContext } from 'react';\nimport AuthContext from '../auth'\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Paper from '@mui/material/Paper';\nimport { GlobalStoreContext } from '../store';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Modal from './Modal';\n\nexport default function LoginScreen() {\n  const { auth } = useContext(AuthContext);\n  const { store } = useContext(GlobalStoreContext);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    // eslint-disable-next-line no-console\n    auth.loginUser({\n        email: formData.get('email'),\n        password: formData.get('password')\n    }, store);\n  };\n\n  return (\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\n        <CssBaseline />\n        <Modal />\n        <Grid\n          item\n          xs={false}\n          sm={4}\n          md={7}\n          sx={{\n            backgroundImage: 'url(https://source.unsplash.com/random)',\n            backgroundRepeat: 'no-repeat',\n            backgroundColor: (t) =>\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n          }}\n        />\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n          <Box\n            sx={{\n              my: 8,\n              mx: 4,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign in\n            </Typography>\n            <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Sign In\n              </Button>\n              <Grid container>\n                <Grid item xs>\n                </Grid>\n                <Grid item>\n                  <Link href=\"/register/\" variant=\"body2\">\n                    {\"Don't have an account? Sign Up\"}\n                  </Link>\n                </Grid>\n              </Grid>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n  );\n}","/Users/coby/Documents/Test/client/src/components/ListCard.js",["102","103"],"/Users/coby/Documents/Test/client/src/components/RegisterScreen.js",[],"/Users/coby/Documents/Test/client/src/components/Top5Item.js",["104","105","106","107","108","109","110","111"],"import { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { borderRadius } from \"@mui/system\";\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [draggedTo, setDraggedTo] = useState(0);\n    const [text, setText] = useState(\"\");\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsItemEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            let id = event.target.id.substring(\"item-\".length);\n            store.updateItem(id, event.target.value);\n            toggleEdit();\n        }\n    }\n\n    function handleClick(event) {\n        if(event.detail === 2) {\n            handleToggleEdit(event);\n        }\n    }\n\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n\n    let { index } = props;\n\n    let itemClass = \"top5-item\";\n\n    let component = \n        <Box sx={{ flexGrow: 1 , fontSize: \"40pt\"}} onClick = {handleClick} id = \"list-item\">{props.text}</Box>\n    if(editActive) {\n        component = \n        <TextField\n            required\n            fullWidth\n            id={'item-' + (index)}\n            name=\"name\"\n            className='top5-item'\n            onKeyPress={handleKeyPress}\n            onChange={handleUpdateText}\n            defaultValue={props.text}\n            inputProps={{style: {fontSize: \"24pt\", color: \"black\", background: \"#DEF581\", height: \"22px\", left: \"2%\"}}}\n            style = {{\n                height: \"60px\",\n                color: \"yellow\",\n                width: \"113.7%\"\n            }}\n            autoFocus\n        />\n    }\n    return (component);\n}\n\nexport default Top5Item;","/Users/coby/Documents/Test/client/src/components/SplashScreen.js",[],"/Users/coby/Documents/Test/client/src/components/WorkspaceScreen.js",["112","113"],"import { useState, useContext } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport { Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\nimport { TextField } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n    \n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n    const [ listName, setListName ] = useState(store.currentList.name);\n\n    const saveList = function () {\n        store.changeListName(store.currentList._id, listName);\n        store.closeCurrentList();\n    }\n\n    function hasRepetitions(arr) {\n        for(let i = 0; i < arr.length; i++) {\n            for(let j = i + 1; j < arr.length; j++) {\n                if(arr[i] === arr[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    function publishList() {\n        if(listName === \"\") {\n            console.log(\"Can't publish a list without a title\");\n        }\n        else if(store.currentList.items[0] === \"\" || store.currentList.items[1] === \"\" || store.currentList.items[2] === \"\" || store.currentList.items[3] === \"\" || store.currentList.items[4] === \"\") {\n            console.log(\"Can't publish a list when one of the items is empty\");\n        }\n        else if(hasRepetitions(store.currentList.items)) {\n            console.log(\"Can't publish a list with repeating items.\");\n        }\n        else {\n            store.setListPublished();\n            saveList();\n        }\n    }\n\n    function handleUpdate (event) {\n        setListName(event.target.value);\n    }\n\n    return (\n        <div id=\"top5-workspace\">\n            <TextField defaultValue = {store.currentList.name} id = \"list-name\" size = \"small\" sx = {{width: '300px', left: '10px'}}\n                onChange = {handleUpdate}/>\n            <div id=\"workspace-edit\">\n                \n            <Container id = \"item-container\">\n                <Grid container spacing={1} border = \"1px\" rowSpacing = {3}>\n                    <Grid container item spacing={2} sx = {{border: '1px'}}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 1 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[0]}\n                                index = {0}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 2 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[1]}\n                                index = {1}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 3 </div>\n                        </Grid>\n                        <Grid item xs = {10}> \n                            <Top5Item\n                                text={store.currentList.items[2]}\n                                index = {2}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 4 </div>\n                        </Grid>\n                        <Grid item xs = {10}>\n                            <Top5Item\n                                text={store.currentList.items[3]}\n                                index = {3}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid container item spacing={2}>\n                        <Grid item xs = {0.75}> \n                            <div id = \"item-number\"> 5 </div>\n                        </Grid>\n                        <Grid item xs = {10}> \n                            <Top5Item\n                                text={store.currentList.items[4]}\n                                index = {4}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Container>\n            </div>\n            <div id = \"workspaceButtons\">\n                <Button variant = \"contained\" onClick = {saveList}> Save </Button>\n                &nbsp;&nbsp;&nbsp;\n                <Button variant = \"contained\" onClick = {publishList}> Publish </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceScreen;","/Users/coby/Documents/Test/client/src/components/Statusbar.js",["114","115"],"import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport { useLocation } from 'react-router-dom'\nimport HomeIcon from '@mui/icons-material/Home'\nimport GroupsIcon from '@mui/icons-material/Groups'\nimport PersonIcon from '@mui/icons-material/Person'\nimport FunctionsIcon from '@mui/icons-material/Functions'\nimport TextField from '@mui/material/TextField'\nimport Typography from '@mui/material/Typography'\nimport Grid from '@mui/material/Grid'\nimport SortIcon from '@mui/icons-material/Sort'\nimport Fab from '@mui/material/Fab'\nimport AddIcon from '@mui/icons-material/Add'\nimport IconButton from '@mui/material/IconButton'\nimport AuthContext from '../auth'\nimport Menu from '@mui/material/Menu'\nimport MenuItem from '@mui/material/MenuItem'\nimport Container from '@mui/material/Container'\n\n/*\n    Our Status bar React component goes at the bottom of our UI.\n    \n    @author McKilla Gorilla\n*/\nfunction Statusbar(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n    let text = \"\";\n\n    const {tab, homeCallback, groupsCallback, userCallback, communityCallback} = props;\n\n    const location = useLocation();\n    if (store.currentList) {\n        text = store.currentList.name;\n    }\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleCreateNewList = () => {\n        store.createNewList();\n    }\n\n    const handleHome = (event) => {\n        homeCallback();\n        handleMenuClose();\n        store.loadUserIdNamePairs(auth.user.email);\n    }\n\n    const handleGroups = () => {\n        groupsCallback();\n        handleMenuClose();\n        store.loadAllPublishedLists();\n    }\n\n    function handlePerson() {\n        handleMenuClose();\n        userCallback();\n    }\n\n    function handleCommunity() {\n        console.log(\"COMMUNITY\");\n        communityCallback();\n    }\n\n    function sortList(type) {\n        handleMenuClose();\n        store.sortLists(type);\n    }\n\n    let menu = \n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={'primary-search-account-menu'}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={store.sortLists(\"ascDate\")}>Publish Date (Newest)</MenuItem>\n            <MenuItem onClick={store.sortLists(\"descDate\")}>Publish Date (Oldest)</MenuItem>\n            <MenuItem onClick={store.sortLists(\"views\")}>Views</MenuItem>\n            <MenuItem onClick={store.sortLists(\"likes\")}>Likes</MenuItem>\n            <MenuItem onClick={store.sortLists(\"dislikes\")}>Dislikes</MenuItem>\n        </Menu>\n\n    let statusBarContents = \n            <Fab \n                color=\"primary\" \n                aria-label=\"add\"\n                id=\"add-list-button\"\n                onClick={handleCreateNewList}\n            >\n                <AddIcon />\n            </Fab> \n    let component = \"\";\n    let firstColor = \"grey\";\n    let secondColor = \"grey\";\n    let thirdColor = \"grey\";\n    let fourthColor = \"grey\";\n    if(tab === \"HOME\") {\n        firstColor = \"blue\";\n    }\n    else if(tab === \"ALL\") {\n        secondColor = \"blue\";\n        statusBarContents = <div> All Lists</div>\n    }\n    else if(tab === \"USER\") {\n        thirdColor = \"blue\";\n        statusBarContents = <div> User Lists </div>\n    }\n    else if(tab === \"COMMUNITY\") {\n        fourthColor = \"blue\";\n        statusBarContents = <div> Community Lists </div>\n    }\n    if(location.pathname === \"/lists/\") {\n        component = <div id=\"top5-list-interface\">\n                        <Grid container spacing = {2} >\n                            <Grid item xs = {4} >\n                                <IconButton onClick = {(event) => {handleHome(event)}} >\n                                    <HomeIcon style = {{fontSize:'30pt', position: 'absolute', left: '2%', color: firstColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handleGroups}>\n                                    <GroupsIcon style = {{fontSize:'30pt', position: 'absolute', left: '22%', color: secondColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handlePerson}>\n                                    <PersonIcon style = {{fontSize:'30pt', position: 'absolute', left: '42%', color: thirdColor}}/>\n                                </IconButton>\n                                &nbsp;&nbsp;\n                                <IconButton onClick = {handleCommunity}>\n                                    <FunctionsIcon style = {{fontSize:'30pt', position: 'absolute', left: '62%', color: fourthColor}}/>\n                                </IconButton>\n                            </Grid>\n                            <Grid item xs = {4} >\n                                <TextField placeholder = \"Search\" size=\"small\" sx = {{width: \"100%\"}}/>\n                            </Grid>\n                            <Grid item xs = {4} >\n                                <Typography style = {{\n                                    position: \"absolute\",\n                                    left: \"85%\",\n                                    fontSize: \"20pt\"\n                                }}> Sort By <SortIcon fontSize = \"Small\" onClick = {handleProfileMenuOpen}/> </Typography>\n                            </Grid>\n                        </Grid>\n                        <Container sx = {{mx: 'auto', position: 'absolute', top: '90%', height: '10%'}}>\n                            {statusBarContents}\n                        </Container>\n                        {menu}\n                    </div>\n    }\n    \n    return (\n        component\n    );\n}\n\nexport default Statusbar;","/Users/coby/Documents/Test/client/src/api/index.js",[],"/Users/coby/Documents/Test/client/src/components/Modal.js",["116"],"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport AuthContext from '../auth';\nimport { useContext, useState } from 'react';\nimport Alert from '@mui/material/Alert';\nimport GlobalStoreContext from '../store';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function BasicModal() {\n  const { store } = useContext(GlobalStoreContext);\n  const { auth } = useContext(AuthContext);\n  let open = false;\n\n  const hideError = () => {\n      auth.hideError();\n  }\n\n  const cancelDeletion = () => {\n      store.unmarkListForDeletion();\n  }\n\n  const handleDeletion = () => {\n      store.deleteMarkedList();\n  }\n\n  let component = \"\";\n\n  if(auth.err) {\n    open = true;\n    component = <div>\n                    <Modal\n                        open={open}\n                        onClose={hideError}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={style}>\n                            <Alert severity = \"error\">{auth.err}</Alert>\n                            <Button variant = \"outlined\" onClick = {hideError}> Okay! </Button>\n                        </Box>\n                    </Modal>\n                </div>\n  }\n  if(store.listMarkedForDeletion) {\n    open=true;\n    component = <div>\n                    <Modal\n                        open={open}\n                        onClose={cancelDeletion}\n                        aria-labelledby=\"modal-modal-title\"\n                        aria-describedby=\"modal-modal-description\"\n                    >\n                        <Box sx={style}>\n                            <Alert severity = \"error\"> Are you sure you want to delete the Top 5 {store.listMarkedForDeletion.name}?</Alert>\n                            <Button variant = \"outlined\" onClick = {handleDeletion}> Confirm </Button>\n                            <Button variant = \"outlined\" onClick = {cancelDeletion}> Cancel </Button>\n                        </Box>\n                    </Modal>\n                </div>\n  }\n\n  return (component);\n}","/Users/coby/Documents/Test/client/src/components/Copyright.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":10,"column":5,"nodeType":"123","messageId":"124","endLine":10,"endColumn":14},{"ruleId":"121","severity":1,"message":"125","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":29,"column":8,"nodeType":"128","endLine":29,"endColumn":10,"suggestions":"129"},{"ruleId":"121","severity":1,"message":"130","line":42,"column":11,"nodeType":"123","messageId":"124","endLine":42,"endColumn":18},{"ruleId":"121","severity":1,"message":"131","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":20},{"ruleId":"121","severity":1,"message":"132","line":1,"column":29,"nodeType":"123","messageId":"124","endLine":1,"endColumn":38},{"ruleId":"121","severity":1,"message":"133","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":13},{"ruleId":"121","severity":1,"message":"134","line":4,"column":15,"nodeType":"123","messageId":"124","endLine":4,"endColumn":25},{"ruleId":"121","severity":1,"message":"135","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":15},{"ruleId":"121","severity":1,"message":"136","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":17},{"ruleId":"121","severity":1,"message":"137","line":15,"column":8,"nodeType":"123","messageId":"124","endLine":15,"endColumn":24},{"ruleId":"121","severity":1,"message":"138","line":16,"column":8,"nodeType":"123","messageId":"124","endLine":16,"endColumn":16},{"ruleId":"121","severity":1,"message":"139","line":8,"column":8,"nodeType":"123","messageId":"124","endLine":8,"endColumn":13},{"ruleId":"121","severity":1,"message":"140","line":29,"column":13,"nodeType":"123","messageId":"124","endLine":29,"endColumn":16},{"ruleId":"121","severity":1,"message":"141","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":16},{"ruleId":"121","severity":1,"message":"142","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":18},{"ruleId":"121","severity":1,"message":"143","line":7,"column":8,"nodeType":"123","messageId":"124","endLine":7,"endColumn":16},{"ruleId":"121","severity":1,"message":"144","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":22},{"ruleId":"121","severity":1,"message":"145","line":18,"column":12,"nodeType":"123","messageId":"124","endLine":18,"endColumn":21},{"ruleId":"121","severity":1,"message":"146","line":18,"column":23,"nodeType":"123","messageId":"124","endLine":18,"endColumn":35},{"ruleId":"121","severity":1,"message":"147","line":19,"column":12,"nodeType":"123","messageId":"124","endLine":19,"endColumn":16},{"ruleId":"121","severity":1,"message":"148","line":54,"column":9,"nodeType":"123","messageId":"124","endLine":54,"endColumn":18},{"ruleId":"121","severity":1,"message":"149","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":12},{"ruleId":"121","severity":1,"message":"134","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":20},{"ruleId":"121","severity":1,"message":"147","line":36,"column":9,"nodeType":"123","messageId":"124","endLine":36,"endColumn":13},{"ruleId":"121","severity":1,"message":"150","line":73,"column":14,"nodeType":"123","messageId":"124","endLine":73,"endColumn":22},{"ruleId":"121","severity":1,"message":"151","line":6,"column":22,"nodeType":"123","messageId":"124","endLine":6,"endColumn":30},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'Statusbar' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["154"],"'history' is assigned a value but never used.","'SplashScreen' is defined but never used.","'useEffect' is defined but never used.","'Fab' is defined but never used.","'Typography' is defined but never used.","'AddIcon' is defined but never used.","'Container' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Modal' is defined but never used.","'key' is assigned a value but never used.","'ListItem' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'borderRadius' is defined but never used.","'draggedTo' is assigned a value but never used.","'setDraggedTo' is assigned a value but never used.","'text' is assigned a value but never used.","'itemClass' is assigned a value but never used.","'List' is defined but never used.","'sortList' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Update the dependencies array to be: [auth]",{"range":"157","text":"158"},[810,812],"[auth]"]